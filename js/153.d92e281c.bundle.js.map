{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/coffeescript.js"],"names":["module","exports","hljs","KEYWORDS","keyword","literal","built_in","JS_IDENT_RE","SUBST","className","begin","end","keywords","EXPRESSIONS","BINARY_NUMBER_MODE","inherit","C_NUMBER_MODE","starts","relevance","variants","contains","BACKSLASH_ESCAPE","HASH_COMMENT_MODE","subLanguage","excludeBegin","excludeEnd","TITLE","TITLE_MODE","PARAMS","returnBegin","concat","aliases","illegal","COMMENT","beginKeywords","endsWithParent","returnEnd"],"mappings":"6EAAAA,EAAAC,QAAA,SAAAC,GACA,IAAAC,GACAC,QAEA,+NAIAC,QAEA,0CAGAC,SACA,2DAEAC,EAAA,2BACAC,GACAC,UAAA,QACAC,MAAA,MAAeC,IAAA,IACfC,SAAAT,GAEAU,GACAX,EAAAY,mBACAZ,EAAAa,QAAAb,EAAAc,eAAsCC,QAASN,IAAA,WAAAO,UAAA,MAE/CT,UAAA,SACAU,WAEAT,MAAA,MAAAC,IAAA,MACAS,UAAAlB,EAAAmB,oBAGAX,MAAA,IAAAC,IAAA,IACAS,UAAAlB,EAAAmB,oBAGAX,MAAA,MAAAC,IAAA,MACAS,UAAAlB,EAAAmB,iBAAAb,KAGAE,MAAA,IAAAC,IAAA,IACAS,UAAAlB,EAAAmB,iBAAAb,OAKAC,UAAA,SACAU,WAEAT,MAAA,MAAAC,IAAA,MACAS,UAAAZ,EAAAN,EAAAoB,qBAGAZ,MAAA,WACAQ,UAAA,IAKAR,MAAA,2CAKAA,MAAA,IAAAH,IAGAgB,YAAA,aACAC,cAAA,EAAAC,YAAA,EACAN,WAEAT,MAAA,MAAAC,IAAA,QAGAD,MAAA,IAAAC,IAAA,QAKAH,EAAAY,SAAAP,EAEA,IAAAa,EAAAxB,EAAAa,QAAAb,EAAAyB,YAA6CjB,MAAAH,IAE7CqB,GACAnB,UAAA,SACAC,MAAA,YAAAmB,aAAA,EAGAT,WACAV,MAAA,KAAAC,IAAA,KACAC,SAAAT,EACAiB,UAAA,QAAAU,OAAAjB,MAIA,OACAkB,SAAA,wBACAnB,SAAAT,EACA6B,QAAA,OACAZ,SAAAP,EAAAiB,QACA5B,EAAA+B,QAAA,aACA/B,EAAAoB,mBAEAb,UAAA,WACAC,MAAA,QAAAH,EAAA,mCAAAI,IAAA,QACAkB,aAAA,EACAT,UAAAM,EAAAE,KAIAlB,MAAA,aACAQ,UAAA,EACAE,WAEAX,UAAA,WACAC,MAjCA,0BAiCAC,IAAA,QACAkB,aAAA,EACAT,UAAAQ,OAKAnB,UAAA,QACAyB,cAAA,QACAvB,IAAA,IACAqB,QAAA,YACAZ,WAEAc,cAAA,UACAC,gBAAA,EACAH,QAAA,YACAZ,UAAAM,IAEAA,KAIAhB,MAAAH,EAAA,IAAAI,IAAA,IACAkB,aAAA,EAAAO,WAAA,EACAlB,UAAA","file":"153.d92e281c.bundle.js","sourcesContent":["module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // JS keywords\n      'in if for while finally new do return else break catch instanceof throw try this ' +\n      'switch continue typeof delete debugger super yield import export from as default await ' +\n      // Coffee keywords\n      'then unless until loop of by when and or is isnt not',\n    literal:\n      // JS literals\n      'true false null undefined ' +\n      // Coffee literals\n      'yes no on off',\n    built_in:\n      'npm require console print module global window document'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var SUBST = {\n    className: 'subst',\n    begin: /#\\{/, end: /}/,\n    keywords: KEYWORDS\n  };\n  var EXPRESSIONS = [\n    hljs.BINARY_NUMBER_MODE,\n    hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp\n    {\n      className: 'string',\n      variants: [\n        {\n          begin: /'''/, end: /'''/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /'/, end: /'/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /\"\"\"/, end: /\"\"\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n        },\n        {\n          begin: /\"/, end: /\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n        }\n      ]\n    },\n    {\n      className: 'regexp',\n      variants: [\n        {\n          begin: '///', end: '///',\n          contains: [SUBST, hljs.HASH_COMMENT_MODE]\n        },\n        {\n          begin: '//[gim]*',\n          relevance: 0\n        },\n        {\n          // regex can't start with space to parse x / 2 / 3 as two divisions\n          // regex can't start with *, and it supports an \"illegal\" in the main mode\n          begin: /\\/(?![ *])(\\\\\\/|.)*?\\/[gim]*(?=\\W|$)/\n        }\n      ]\n    },\n    {\n      begin: '@' + JS_IDENT_RE // relevance booster\n    },\n    {\n      subLanguage: 'javascript',\n      excludeBegin: true, excludeEnd: true,\n      variants: [\n        {\n          begin: '```', end: '```',\n        },\n        {\n          begin: '`', end: '`',\n        }\n      ]\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});\n  var PARAMS_RE = '(\\\\(.*\\\\))?\\\\s*\\\\B[-=]>';\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\([^\\\\(]', returnBegin: true,\n    /* We need another contained nameless mode to not have every nested\n    pair of parens to be called \"params\" */\n    contains: [{\n      begin: /\\(/, end: /\\)/,\n      keywords: KEYWORDS,\n      contains: ['self'].concat(EXPRESSIONS)\n    }]\n  };\n\n  return {\n    aliases: ['coffee', 'cson', 'iced'],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: EXPRESSIONS.concat([\n      hljs.COMMENT('###', '###'),\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'function',\n        begin: '^\\\\s*' + JS_IDENT_RE + '\\\\s*=\\\\s*' + PARAMS_RE, end: '[-=]>',\n        returnBegin: true,\n        contains: [TITLE, PARAMS]\n      },\n      {\n        // anonymous function start\n        begin: /[:\\(,=]\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: 'function',\n            begin: PARAMS_RE, end: '[-=]>',\n            returnBegin: true,\n            contains: [PARAMS]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class',\n        end: '$',\n        illegal: /[:=\"\\[\\]]/,\n        contains: [\n          {\n            beginKeywords: 'extends',\n            endsWithParent: true,\n            illegal: /[:=\"\\[\\]]/,\n            contains: [TITLE]\n          },\n          TITLE\n        ]\n      },\n      {\n        begin: JS_IDENT_RE + ':', end: ':',\n        returnBegin: true, returnEnd: true,\n        relevance: 0\n      }\n    ])\n  };\n};"],"sourceRoot":""}